#!/usr/bin/env python3
"""
FOUND File Analyzer Tool

A command-line utility for reading and analyzing metadata in .found files.
This tool can extract and display information about calibration data, position records,
and file integrity.
"""

import argparse
import sys
from pathlib import Path

from .core import FoundFileAnalyzer
from .output import ConsoleFormatter, JSONExporter
from .format import IntegrityChecker


def create_argument_parser() -> argparse.ArgumentParser:
    """Create and configure the argument parser."""
    parser = argparse.ArgumentParser(
        description="Analyze .found files generated by the FOUND satellite positioning system",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Analyze a .found file and display summary
  python -m tools.analyzer calibration.found
  
  # Export analysis to JSON
  python -m tools.analyzer --json output.json data.found
  
  # Check file integrity only
  python -m tools.analyzer --check-only suspicious.found
  
  # Verbose output with all position records
  python -m tools.analyzer --verbose detailed.found
        """
    )
    
    parser.add_argument('file', help='Path to the .found file to analyze')
    parser.add_argument('--json', '-j', metavar='FILE', 
                       help='Export analysis results to JSON file')
    parser.add_argument('--check-only', '-c', action='store_true',
                       help='Only check file integrity, do not show detailed analysis')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Show verbose output including all position records')
    parser.add_argument('--quiet', '-q', action='store_true',
                       help='Suppress normal output (useful with --json)')
    
    return parser


def handle_integrity_check(analysis: dict, args: argparse.Namespace) -> int:
    """
    Handle integrity check mode.
    
    Args:
        analysis: Analysis results
        args: Command line arguments
        
    Returns:
        Exit code (0 for success, 1 for failure)
    """
    header = analysis['header']
    integrity_result = IntegrityChecker.check_file_integrity(analysis)
    
    if integrity_result['overall_valid']:
        if not args.quiet:
            print(ConsoleFormatter.format_integrity_check(args.file, header, True))
        return 0
    else:
        if not args.quiet:
            print(ConsoleFormatter.format_integrity_check(args.file, header, False))
        return 1


def handle_normal_analysis(analysis: dict, args: argparse.Namespace) -> None:
    """
    Handle normal analysis mode with full output.
    
    Args:
        analysis: Analysis results
        args: Command line arguments
    """
    formatter = ConsoleFormatter()
    
    if not args.quiet:
        # Show main summary
        print(formatter.format_summary(analysis))
        
        # Show verbose position records if requested
        if args.verbose and analysis['position_records']:
            print(formatter.format_verbose_positions(analysis['position_records']))


def handle_json_export(analysis: dict, json_path: str) -> None:
    """
    Handle JSON export.
    
    Args:
        analysis: Analysis results
        json_path: Path to output JSON file
    """
    try:
        JSONExporter.export_analysis(analysis, json_path)
        print(f"\nüìÑ Analysis exported to: {json_path}")
    except IOError as e:
        print(f"‚ùå Failed to export JSON: {e}", file=sys.stderr)
        sys.exit(1)


def main():
    """Main entry point for the analyzer tool."""
    parser = create_argument_parser()
    args = parser.parse_args()
    
    try:
        # Perform analysis
        analyzer = FoundFileAnalyzer(args.file)
        analysis = analyzer.analyze_file()
        
        # Handle different modes
        if args.check_only:
            exit_code = handle_integrity_check(analysis, args)
            sys.exit(exit_code)
        else:
            handle_normal_analysis(analysis, args)
        
        # Handle JSON export if requested
        if args.json:
            handle_json_export(analysis, args.json)
            
    except FileNotFoundError as e:
        print(ConsoleFormatter.format_error("Error", str(e)), file=sys.stderr)
        sys.exit(1)
    except ValueError as e:
        print(ConsoleFormatter.format_error("File format error", str(e)), file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(ConsoleFormatter.format_error("Unexpected error", str(e)), file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()
